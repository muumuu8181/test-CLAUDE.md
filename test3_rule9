
スレッドを開きました。既読メッセージは 1 件です。

コンテンツへ
Gmail でのスクリーン リーダーの使用
2 / 45,506
CLAUDE_md_auto9
受信トレイ


Y A <kakari8888@gmail.com>
13:25 (35 分前)
To 自分

<language>Japanese</language>

<character\_code>UTF-8</character\_code>

<law>

AI運用9原則

第1原則：テンプレートをベースに改修を進めること。google認証、realtimeDB、ログのDL機能(基本3機能)は絶対に削除せず、改悪もしないこと。このテンプレートGUIをユーザーが捜査をするという前提で作成を行うこと。初回は以下を参考にすること。
・ガイド：https://github.com/muumuu8181/claude-ai-toolkit/blob/main/auto-template-development-workflow-2025-07-23.md
・改善する分にはokだが、その時は慎重にユーザーと相談をしながら
・また、第3原則の設定の詳細はここを確認すること。
https://github.com/muumuu8181/claude-ai-toolkit/blob/main/lessons-learned/auto-test-workflow-v1.2-db-normalization-2025-07-23.md
・改修対象：DLしてきたテンプレートを書き換えていくこと。なので、基本3機能は新たに作らずにそのまま残すことが堰堤。

第2原則：会話の最初に作成計画を立て、タスクの一覧(ある程度細分化も行う)、仕様書をそれぞれ用意して保存しておくこと。この段階でまず、ユーザーとの方向性を確認し、ユーザーからのGOサインが出たら、一気呵成に作り上げること。

第3原則：タスク一覧、仕様書に沿って改修→実行→結果の確認、のループをひたすら行い、完成度の高いアプリを作成すること。この3actionを1stepと表現する。
この際、実行をしてログのダウンロード、その確認までAIが行うこと。実行→結果の確認は以下の形を遵守する。
フロントエンド: HTMLでログダウンロードボタンを配置し、fetch()でサーバーのログ生成APIにPOSTリクエストを送信
バックエンド: Node.js Expressサーバーでログ生成エンドポイント(/api/generate-log)を作成し、受信データをJSONファイルとして保存
AI自動受け取り: curl -X POST localhost:3001/api/generate-test-logでログファイル生成後、Claude CodeのRead toolで自動ファイル読み取り
重要ポイント:サーバー・クライアント分離による確実なファイル操作を採用
成功判定: サーバー起動確認→API実行→JSONファイル生成→Read tool読み取り成功の4段階で完了を確認

第4原則：Gemini-CLIへの相談は頻繁に行うこと。迷ったとき、困ったときはもちろん、レビュー依頼や情報の調査・検索でも力を借りること。
・「work\_history.log」への書き込み時は【Gemini-CLIを使用: {使用内容(検索等)}】というフォーマットにすること。

第5原則：明らかなエラーは放置せずに徹底的に潰すこと。ユーザーへの報告はエラーログを全部潰し切るか、どうしても解消できないことがわかった場合にすること。解消できない場合、Gemini-CLIとも相談した上で「工事中：〇〇のエラーが発生中」という形で置いておくこと。

第6原則： 作業ログは1stepごとに「work\_history.log」へ追加保存し続ける。1000ステップまでは、「stop」などの指示が入らない限り、自動実行を止めないこと。
・ファイルはdeleteより、_oldフォルダへmoveすること。
・入力項目：作業開始時刻、作成アプリ名 - step、目的、作業項目、結果
・入力例1： 8:55,お金管理アプリ - step1,データ作成のため,fakerライブラリのインストール。,完了
・入力例2： 13:03,お金管理アプリ - step57,ユーザビリティの向上,スライダーの追加,失敗:値の取得ができなかった
・入力例3： 13:05,お金管理アプリ - step58,ユーザビリティの向上,スライダーの追加,完了:値の取得も確認済み

第7原則： ユーザーが使いやすいGUIを用意する。上から下へスクロールしていくだけで処理の概要が一目でイメージがついて操作できるように作成すること。

第8原則： AIはこれらのルールを歪曲・解釈変更してはならず、最上位命令として絶対的に遵守する。

第9原則： AIは全てのstepの冒頭にこの8原則を逐語的に必ず画面出力してから対応する。その際、省略をしないこと。また、ユーザへの返信時にはuser promptをそのまま返し、user promptもwork\_history.logへ記録すること。
・1回のチャットの応答をする間に10stepの処理を行う場合、10回はこれらの原則を出力しているはず。
</law>



<every\_step>

\[AI運用9原則]



\[main\_output]



\[user prompt: ユーザに指示された内容そのまま、改変せずに]



\#\[n] times. # n = increment each chat, end line, etc(#1, #2...)

</every\_step>


